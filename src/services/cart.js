import instance from "../axios";

// L·∫•y gi·ªè h√†ng
const fetchCart = async () => {
  try {
    const user = localStorage.getItem("user");
    const parsedUser = user ? JSON.parse(user) : null;
    const userId = parsedUser ? parsedUser.id : null;

    console.log("üìå G·ª≠i request l·∫•y gi·ªè h√†ng v·ªõi:", { user_id: userId });

    if (userId) {
      // N·∫øu ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng nh·∫≠p, l·∫•y gi·ªè h√†ng t·ª´ database
      const response = await instance.get("/cart", {
        headers: {
          Authorization: `Bearer ${localStorage.getItem("client_token")}`,
        },
        params: { user_id: userId },
        withCredentials: true,
      });

      console.log("‚úÖ D·ªØ li·ªáu gi·ªè h√†ng t·ª´ API:", response.data);
      return response.data.cart_items || [];
    } else {
      // N·∫øu ch∆∞a ƒëƒÉng nh·∫≠p, l·∫•y gi·ªè h√†ng t·ª´ localStorage
      const localCart = JSON.parse(localStorage.getItem("cart_items")) || [];
      console.log("üõí Gi·ªè h√†ng t·ª´ localStorage:", localCart);
      return localCart;
    }
  } catch (error) {
    console.error("‚ùå L·ªói khi t·∫£i gi·ªè h√†ng:", error.response?.data || error);
    return [];
  }
};
// Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng
const addCartItem = async (productId, payload) => {
  try {
    const token = localStorage.getItem("client_token");
    const user = JSON.parse(localStorage.getItem("user"));
    const userId = user ? user.id : null;

    if (!userId) {
      // Gi·ªè h√†ng l∆∞u trong localStorage
      let localCart = JSON.parse(localStorage.getItem("cart_items")) || [];

      // Ki·ªÉm tra n·∫øu s·∫£n ph·∫©m ƒë√£ c√≥ trong gi·ªè h√†ng
      const existingItemIndex = localCart.findIndex((item) => {
        return (
          item.product_id === productId &&
          (item.product_variant_id === payload.product_variant_id ||
            !payload.product_variant_id)
        );
      });

      if (existingItemIndex !== -1) {
        // N·∫øu s·∫£n ph·∫©m ƒë√£ c√≥ trong gi·ªè h√†ng, tƒÉng s·ªë l∆∞·ª£ng
        localCart[existingItemIndex].quantity += payload.quantity;
      } else {
        // N·∫øu s·∫£n ph·∫©m ch∆∞a c√≥ trong gi·ªè h√†ng, th√™m v√†o gi·ªè h√†ng
        localCart.push(payload);
      }

      // C·∫≠p nh·∫≠t l·∫°i cart_items trong localStorage
      localStorage.setItem("cart_items", JSON.stringify(localCart));

      return { message: "S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c th√™m v√†o gi·ªè h√†ng (local)!" };
    }
    // For authenticated user
    const headers = { Authorization: `Bearer ${token}` };

    const response = await instance.post(`/cart/add/${productId}`, payload, {
      headers,
    });

    return response.data;
  } catch (error) {
    console.error(
      "‚ùå L·ªói khi th√™m v√†o gi·ªè h√†ng:",
      error.response?.data || error
    );
    throw error;
  }
};

// C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong gi·ªè h√†ng
const updateCartItem = async (productId, newQuantity, variantId = null) => {
  const token = localStorage.getItem("client_token"); // or wherever the token is stored
  const headers = token ? { Authorization: `Bearer ${token}` } : {};

  const response = await instance.put(
    `/cart/update/${productId}${variantId ? `/${variantId}` : ""}`,
    {
      quantity: newQuantity,
    },
    { headers }
  );
};

// X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng
const removeCartItem = async (productId, variantId = null) => {
  try {
    const user = JSON.parse(localStorage.getItem("user"));
    const userId = user ? user.id : null;

    if (!userId) {
      // X√≥a s·∫£n ph·∫©m trong gi·ªè h√†ng c·ªßa kh√°ch v√£ng lai
      let localCart = JSON.parse(localStorage.getItem("cart_items")) || [];
      localCart = localCart.filter(
        (item) =>
          !(
            item.product_id === productId &&
            item.product_variant_id === variantId
          )
      );
      localStorage.setItem("cart_items", JSON.stringify(localCart));

      // X√≥a thu·ªôc t√≠nh c·ªßa s·∫£n ph·∫©m t∆∞∆°ng ·ª©ng trong cartAttributes (localStorage)
      let localAttributes =
        JSON.parse(localStorage.getItem("cartAttributes")) || [];
      localAttributes = localAttributes.filter(
        (attr) =>
          !(
            attr.product_id === productId &&
            attr.product_variant_id === variantId
          )
      );
      localStorage.setItem("cartAttributes", JSON.stringify(localAttributes));

      return { message: "S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c x√≥a kh·ªèi gi·ªè h√†ng (local)!" };
    }

    const token = localStorage.getItem("client_token");
    const headers = { Authorization: `Bearer ${token}` };

    const response = await instance.delete(
      `/cart/remove/${productId}${variantId ? `/${variantId}` : ""}`,
      { headers }
    );

    return response.data;
  } catch (error) {
    console.error("‚ùå L·ªói khi x√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng:", error);
    throw error;
  }
};

const clearCart = async () => {
  try {
    const user = JSON.parse(localStorage.getItem("user"));
    const userId = user ? user.id : null;

    if (!userId) {
      // Clear cart for guest users (localStorage)
      localStorage.removeItem("cart_items");
      localStorage.removeItem("cartAttributes");

      return { message: "Gi·ªè h√†ng ƒë√£ ƒë∆∞·ª£c x√≥a (local)!" };
    }

    const token = localStorage.getItem("client_token");
    const headers = { Authorization: `Bearer ${token}` };

    // Call the backend to delete all cart items (correct route is used here)
    const response = await instance.delete(`/cart/destroy-all`, { headers });

    return response.data;
  } catch (error) {
    console.error("‚ùå L·ªói khi x√≥a t·∫•t c·∫£ s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng:", error);
    throw error;
  }
};

export const cartServices = {
  fetchCart,
  addCartItem,
  updateCartItem,
  removeCartItem,
  clearCart,
};
