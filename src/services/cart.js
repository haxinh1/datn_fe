import instance from "../axios";

// L·∫•y gi·ªè h√†ng
// const fetchCart = async () => {
//   try {
//     // üîπ L·∫•y user_id t·ª´ localStorage n·∫øu ƒë√£ ƒëƒÉng nh·∫≠p
//     const user = localStorage.getItem("user");
//     const parsedUser = user ? JSON.parse(user) : null;
//     const userId = parsedUser ? parsedUser.id : null;

//     // üîπ N·∫øu ch∆∞a ƒëƒÉng nh·∫≠p, l·∫•y session_id t·ª´ sessionStorage
//     let sessionId = sessionStorage.getItem("session_id");

//     if (!userId && !sessionId) {
//       // N·∫øu kh√¥ng c√≥ session_id, t·∫°o m·ªõi v√† l∆∞u v√†o sessionStorage
//       sessionId = crypto.randomUUID();
//       sessionStorage.setItem("session_id", sessionId);
//     }

//     console.log("üìå G·ª≠i request l·∫•y gi·ªè h√†ng v·ªõi:", {
//       user_id: userId,
//       session_id: sessionId,
//     });

//     // üîπ G·ª≠i request ƒë·∫øn API
//     const response = await instance.get("/cart", {
//       headers: {
//         Authorization: `Bearer ${localStorage.getItem("client_token")}`,
//       },
//       params: userId ? { user_id: userId } : { session_id: sessionId },
//     });

//     console.log("‚úÖ D·ªØ li·ªáu gi·ªè h√†ng t·ª´ API:", response.data);
//     return response.data.cart_items || [];
//   } catch (error) {
//     console.error("‚ùå L·ªói khi t·∫£i gi·ªè h√†ng:", error.response?.data || error);
//     return [];
//   }
// };

const fetchCart = async () => {
  try {
    // L·∫•y user_id t·ª´ localStorage n·∫øu ƒë√£ ƒëƒÉng nh·∫≠p
    const user = localStorage.getItem("user");
    const parsedUser = user ? JSON.parse(user) : null;
    const userId = parsedUser ? parsedUser.id : null;

    console.log("üìå G·ª≠i request l·∫•y gi·ªè h√†ng v·ªõi:", { user_id: userId });

    // üîπ G·ª≠i request ƒë·∫øn API, kh√¥ng c·∫ßn session_id v√¨ backend t·ª± qu·∫£n l√Ω
    const response = await instance.get("/cart", {
      headers: {
        Authorization: `Bearer ${localStorage.getItem("client_token")}`,
      },
      params: userId ? { user_id: userId } : {}, // Kh√¥ng c·∫ßn g·ª≠i session_id
    });

    console.log("‚úÖ D·ªØ li·ªáu gi·ªè h√†ng t·ª´ API:", response.data);
    return response.data.cart_items || [];
  } catch (error) {
    console.error("‚ùå L·ªói khi t·∫£i gi·ªè h√†ng:", error.response?.data || error);
    return [];
  }
};

// Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng
// const addCartItem = async (id, payload) => {
//   try {
//     const token = localStorage.getItem("client_token");

//     const response = await instance.post(`cart/add/${id}`, payload, {
//       headers: {
//         "Content-Type": "application/json",
//         Authorization: token ? `Bearer ${token}` : "",
//       },
//     });

//     return response.data;
//   } catch (error) {
//     console.error(
//       "L·ªói khi g·ª≠i request th√™m v√†o gi·ªè h√†ng:",
//       error.response?.data || error
//     );
//     throw error;
//   }
// };

// const addCartItem = async (id, payload) => {
//   try {
//     const token = localStorage.getItem("client_token");

//     const response = await instance.post(`cart/add/${id}`, payload, {
//       headers: {
//         "Content-Type": "application/json",
//         Authorization: token ? `Bearer ${token}` : "",
//       },
//     });

//     return response.data;
//   } catch (error) {
//     console.error(
//       "‚ùå L·ªói khi th√™m v√†o gi·ªè h√†ng:",
//       error.response?.data || error
//     );
//     throw error;
//   }
// };

const addCartItem = async (id, payload) => {
  try {
    const token = localStorage.getItem("client_token");

    // T·∫°o header cho request, bao g·ªìm authorization n·∫øu token t·ªìn t·∫°i
    const headers = {
      "Content-Type": "application/json",
      Authorization: token ? `Bearer ${token}` : "",
    };

    // G·ª≠i request ƒë·ªÉ th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng
    const response = await instance.post(`cart/add/${id}`, payload, {
      headers,
    });

    return response.data;
  } catch (error) {
    console.error(
      "‚ùå L·ªói khi th√™m v√†o gi·ªè h√†ng:",
      error.response?.data || error
    );
    throw error;
  }
};

// C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong gi·ªè h√†ng
const updateCartItem = async (productId, newQuantity, variantId = null) => {
  // G·ª≠i y√™u c·∫ßu PUT v·ªõi URL v√† d·ªØ li·ªáu tr·ª±c ti·∫øp
  const response = await instance.put(
    `/cart/update/${productId}${variantId ? `/${variantId}` : ""}`,
    {
      quantity: newQuantity,
    }
  );
  return response.data;
};
// X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng
const removeCartItem = async (productId, variantId = null) => {
  try {
    const token = localStorage.getItem("client_token");

    // X√¢y d·ª±ng URL d·ª±a tr√™n vi·ªác c√≥ variantId hay kh√¥ng
    const url = variantId
      ? `cart/remove/${productId}/${variantId}`
      : `cart/remove/${productId}`;

    const response = await instance.delete(url, {
      headers: {
        Authorization: token ? `Bearer ${token}` : "",
      },
    });

    console.log("‚úÖ S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c x√≥a kh·ªèi gi·ªè h√†ng:", response.data);
    return response.data;
  } catch (error) {
    console.error(
      "‚ùå L·ªói khi x√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng:",
      error.response?.data || error
    );
    throw error;
  }
};

export const cartServices = {
  fetchCart,
  addCartItem,
  updateCartItem,
  removeCartItem,
};
