import instance from "../axios";

// L·∫•y gi·ªè h√†ng
// L·∫•y gi·ªè h√†ng
const fetchCart = async () => {
  try {
    const user = localStorage.getItem("user");
    const parsedUser = user ? JSON.parse(user) : null;
    const userId = parsedUser ? parsedUser.id : null;

    console.log("üìå G·ª≠i request l·∫•y gi·ªè h√†ng v·ªõi:", {
      user_id: userId,
    });

    // N·∫øu ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng nh·∫≠p, g·ª≠i request l·∫•y gi·ªè h√†ng t·ª´ database
    if (userId) {
      const response = await instance.get("/cart", {
        headers: {
          Authorization: `Bearer ${localStorage.getItem("client_token")}`,
        },
        params: { user_id: userId }, // G·ª≠i user_id thay v√¨ session_id
      });

      console.log("‚úÖ D·ªØ li·ªáu gi·ªè h√†ng t·ª´ API:", response.data);
      return response.data.cart_items || [];
    } else {
      // N·∫øu ch∆∞a ƒëƒÉng nh·∫≠p, l·∫•y gi·ªè h√†ng t·ª´ session
      const sessionCart = sessionStorage.getItem("cart");
      return sessionCart ? JSON.parse(sessionCart) : [];
    }
  } catch (error) {
    console.error("‚ùå L·ªói khi t·∫£i gi·ªè h√†ng:", error.response?.data || error);
    // N·∫øu c√≥ l·ªói, tr·∫£ v·ªÅ gi·ªè h√†ng trong session
    const sessionCart = sessionStorage.getItem("cart");
    return sessionCart ? JSON.parse(sessionCart) : [];
  }
};

// Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng
const addCartItem = async (productId, payload) => {
  try {
    const token = localStorage.getItem("client_token");
    const user = localStorage.getItem("user");
    const parsedUser = user ? JSON.parse(user) : null;
    const userId = parsedUser ? parsedUser.id : null;

    const headers = {
      "Content-Type": "application/json",
      Authorization: token ? `Bearer ${token}` : "",
    };

    // X·ª≠ l√Ω th√™m v√†o gi·ªè h√†ng d·ª±a tr√™n tr·∫°ng th√°i ƒëƒÉng nh·∫≠p
    if (userId) {
      const response = await instance.post(`cart/add/${productId}`, payload, {
        headers,
      });
      return response.data;
    } else {
      const sessionCart = JSON.parse(sessionStorage.getItem("cart") || "[]"); // ƒê·∫£m b·∫£o l√† m·∫£ng r·ªóng n·∫øu kh√¥ng c√≥ d·ªØ li·ªáu

      const key = productId + "-" + (payload.product_variant_id || "default");

      // C·∫≠p nh·∫≠t gi·ªè h√†ng trong session
      if (sessionCart[key]) {
        sessionCart[key].quantity += payload.quantity;
      } else {
        sessionCart[key] = { ...payload };
      }

      sessionStorage.setItem("cart", JSON.stringify(sessionCart));

      return {
        message: "S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c th√™m v√†o gi·ªè h√†ng (Session)",
        cart_items: sessionCart,
      };
    }
  } catch (error) {
    console.error(
      "‚ùå L·ªói khi th√™m v√†o gi·ªè h√†ng:",
      error.response?.data || error
    );
    throw error;
  }
};

// C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong gi·ªè h√†ng
const updateCartItem = async (productId, newQuantity, variantId = null) => {
  try {
    const user = localStorage.getItem("user");
    const parsedUser = user ? JSON.parse(user) : null;
    const userId = parsedUser ? parsedUser.id : null;

    if (userId) {
      const response = await instance.put(
        `/cart/update/${productId}${variantId ? `/${variantId}` : ""}`,
        {
          quantity: newQuantity,
        }
      );
      return response.data;
    } else {
      const sessionCart = JSON.parse(sessionStorage.getItem("cart") || "{}");
      const key = productId + "-" + (variantId || "default");

      if (!sessionCart[key]) {
        return {
          message: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m trong gi·ªè h√†ng",
          status: 404,
        };
      }

      // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng trong session
      sessionCart[key].quantity = newQuantity;
      sessionStorage.setItem("cart", JSON.stringify(sessionCart));

      return { message: "C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng th√†nh c√¥ng (Session)" };
    }
  } catch (error) {
    console.error(
      "‚ùå L·ªói khi c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng:",
      error.response?.data || error
    );
    throw error;
  }
};

// X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng
const removeCartItem = async (productId, variantId = null) => {
  try {
    const user = localStorage.getItem("user");
    const parsedUser = user ? JSON.parse(user) : null;
    const userId = parsedUser ? parsedUser.id : null;

    const token = localStorage.getItem("client_token");
    const headers = {
      Authorization: token ? `Bearer ${token}` : "",
    };

    if (userId) {
      // Ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng nh·∫≠p, x√≥a s·∫£n ph·∫©m kh·ªèi database
      const response = await instance.delete(
        `cart/remove/${productId}${variantId ? `/${variantId}` : ""}`,
        { headers }
      );
      return response.data;
    } else {
      // Ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p, x√≥a s·∫£n ph·∫©m kh·ªèi session
      const sessionCart = JSON.parse(sessionStorage.getItem("cart") || "{}");
      const key = productId + "-" + (variantId || "default");

      if (!sessionCart[key]) {
        return {
          message: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m trong gi·ªè h√†ng",
          status: 404,
        };
      }

      delete sessionCart[key];
      sessionStorage.setItem("cart", JSON.stringify(sessionCart));

      return { message: "S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c x√≥a kh·ªèi gi·ªè h√†ng (Session)" };
    }
  } catch (error) {
    console.error(
      "‚ùå L·ªói khi x√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng:",
      error.response?.data || error
    );
    throw error;
  }
};

export const cartServices = {
  fetchCart,
  addCartItem,
  updateCartItem,
  removeCartItem,
};
